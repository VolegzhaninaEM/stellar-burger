import type {
  Middleware,
  ActionCreatorWithPayload,
  ActionCreatorWithoutPayload,
  AnyAction,
} from '@reduxjs/toolkit';

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WebSocket middleware
export type SocketActions<TMessagePayload = unknown> = {
  connect: ActionCreatorWithPayload<{ url: string; token?: string }>;
  connected: ActionCreatorWithoutPayload;
  disconnect: ActionCreatorWithoutPayload;
  disconnected: ActionCreatorWithoutPayload;
  message: ActionCreatorWithPayload<TMessagePayload>;
  error: ActionCreatorWithPayload<string>;
};

type SocketConnection = {
  socket: WebSocket | null;
  isConnecting: boolean;
};

// –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ WebSocket
type WebSocketResponse = {
  success: boolean;
  message?: string;
  [key: string]: unknown;
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è WebSocket middleware
export const createSocketMiddleware = <TMessagePayload = unknown>(
  actions: SocketActions<TMessagePayload>
): Middleware => {
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ middleware
  const connections = new Map<string, SocketConnection>();

  return (store) => (next) => (action: unknown) => {
    const typedAction = action as AnyAction;
    const { dispatch } = store;
    const { type } = typedAction;

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const connectionKey = actions.connect.type;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!connections.has(connectionKey)) {
      connections.set(connectionKey, { socket: null, isConnecting: false });
    }

    const connection = connections.get(connectionKey)!;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (type === actions.connect.type) {
      const payload = typedAction.payload as { url: string; token?: string };
      const { url, token } = payload;

      console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: ${url}`);

      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (
        connection.isConnecting ||
        connection.socket?.readyState === WebSocket.CONNECTING
      ) {
        console.log('‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
        return next(action);
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (connection.socket) {
        console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        connection.socket.close();
        connection.socket = null;
      }

      connection.isConnecting = true;

      try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ç–æ–∫–µ–Ω–æ–º –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        const wsUrl = token ? `${url}?token=${token}` : url;
        connection.socket = new WebSocket(wsUrl);

        connection.socket.onopen = (): void => {
          console.log(`‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: ${url}`);
          connection.isConnecting = false;
          dispatch(actions.connected());
        };

        connection.socket.onclose = (event): void => {
          console.log(`üîå WebSocket –∑–∞–∫—Ä—ã—Ç: ${url}`, {
            code: event.code,
            reason: event.reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
            wasClean: event.wasClean,
          });
          connection.isConnecting = false;
          connection.socket = null;
          dispatch(actions.disconnected());
        };

        connection.socket.onerror = (event): void => {
          console.error(`üí• WebSocket –æ—à–∏–±–∫–∞: ${url}`, event);
          connection.isConnecting = false;
          connection.socket = null;
          dispatch(actions.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'));
        };

        connection.socket.onmessage = (event): void => {
          try {
            const data = JSON.parse(event.data as string) as WebSocketResponse;
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebSocket: ${url}`, data);

            if (data.success) {
              dispatch(actions.message(data as TMessagePayload));
            } else {
              dispatch(actions.error(data.message ?? '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É'));
            }
          } catch (error) {
            console.error(`üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: ${url}`, error);
            dispatch(actions.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞'));
          }
        };
      } catch (error) {
        console.error(`üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket: ${url}`, error);
        connection.isConnecting = false;
        dispatch(actions.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'));
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    if (type === actions.disconnect.type || type === actions.disconnected.type) {
      if (connection.socket) {
        console.log(`üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ WebSocket: ${connectionKey}`);
        connection.socket.close(1000, '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        connection.socket = null;
      }
      connection.isConnecting = false;
    }

    return next(action);
  };
};
