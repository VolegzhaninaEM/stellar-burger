import { getCookie } from '../utils/cookies';
import {
  profileOrdersConnect,
  profileOrdersConnected,
  profileOrdersDisconnected,
  profileOrdersError,
  profileOrdersMessage,
} from './profileOrdersSlice';

import type { ProfileOrdersData } from './profileOrdersSlice';
import type { TOrder } from '@components/order-card/order-card.tsx';
import type { Middleware } from '@reduxjs/toolkit';

let socket: WebSocket | null = null;

// –°–æ–∑–¥–∞–µ–º –º–∏–¥–ª–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
export const profileOrdersMiddleware: Middleware = (store) => (next) => (action) => {
  const { dispatch } = store;
  const { type } = action as { type: string };

  if (type === profileOrdersConnect.type) {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (socket) {
      console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
      socket.close();
      socket = null;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–∏—á–Ω—ã–º –∑–∞–∫–∞–∑–∞–º
    const accessToken = getCookie('accessToken');

    if (!accessToken) {
      dispatch(profileOrdersError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤'));
      return next(action);
    }

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const wsUrl = `wss://norma.nomoreparties.space/orders?token=${accessToken}`;
      socket = new WebSocket(wsUrl);

      socket.onopen = (): void => {
        console.log('‚úÖ WebSocket –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω');
        dispatch(profileOrdersConnected());
      };

      socket.onclose = (): void => {
        console.log('üîå WebSocket –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–∫—Ä—ã—Ç');
        dispatch(profileOrdersDisconnected());
        socket = null;
      };

      socket.onerror = (): void => {
        console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è');
        dispatch(profileOrdersError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–∞–∫–∞–∑–æ–≤'));
        socket = null;
      };

      socket.onmessage = (event): void => {
        try {
          const data = JSON.parse(event.data as string) as {
            success: boolean;
            orders: TOrder[];
            total?: number;
            totalToday?: number;
          };

          console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebSocket:', data);

          if (data.success && data.orders) {
            const profileOrdersData: ProfileOrdersData = {
              orders: data.orders,
              total: data.total ?? 0,
              totalToday: data.totalToday ?? 0,
            };
            dispatch(profileOrdersMessage(profileOrdersData));
          } else {
            dispatch(profileOrdersError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'));
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
          dispatch(profileOrdersError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤'));
        }
      };
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
      dispatch(profileOrdersError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'));
    }
  }

  if (type === profileOrdersDisconnected.type && socket) {
    console.log('üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ WebSocket –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è');
    socket.close();
    socket = null;
  }

  return next(action);
};
