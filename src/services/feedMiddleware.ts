import { testWebSocketConnection, logEnvironmentInfo } from '../utils/websocketUtils';
import {
  feedConnect,
  feedConnected,
  feedDisconnected,
  feedError,
  feedMessage,
} from './feedSlice';

import type { FeedData } from './feedSlice';
import type { TOrder } from '@components/order-card/order-card.tsx';
import type { Middleware } from '@reduxjs/toolkit';

let socket: WebSocket | null = null;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 3;
const RECONNECT_INTERVAL = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

export const feedMiddleware: Middleware = (store) => (next) => (action) => {
  const { dispatch } = store;
  const { type } = action as { type: string };

  if (type === feedConnect.type) {
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logEnvironmentInfo();

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (socket) {
      socket.close();
      socket = null;
    }

    const connectWebSocket = async (): Promise<void> => {
      const wsUrl = 'wss://norma.nomoreparties.space/orders/all';

      // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const testResult = await testWebSocketConnection(wsUrl);

      if (!testResult.success) {
        console.error('‚ùå –¢–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª:', testResult.error);
        dispatch(feedError(testResult.error ?? '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'));
        return;
      }

      try {
        console.log('üîå –°–æ–∑–¥–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
        socket = new WebSocket(wsUrl);

        socket.onopen = (): void => {
          console.log('‚úÖ WebSocket –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
          reconnectAttempts = 0;
          dispatch(feedConnected());
        };

        socket.onclose = (event): void => {
          console.log('üîå WebSocket –∑–∞–∫—Ä—ã—Ç:', {
            code: event.code,
            reason: event.reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
            wasClean: event.wasClean,
          });

          dispatch(feedDisconnected());

          // –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
          if (!event.wasClean && reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
            reconnectAttempts++;
            const delay = RECONNECT_INTERVAL * Math.pow(2, reconnectAttempts - 1); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

            console.log(
              `üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`
            );

            setTimeout(() => {
              void connectWebSocket();
            }, delay);
          } else if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
            dispatch(
              feedError(
                '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'
              )
            );
          }
        };

        socket.onerror = (event): void => {
          console.error('üí• WebSocket –æ—à–∏–±–∫–∞:', event);

          let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';

          if (!navigator.onLine) {
            errorMessage = '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
          } else {
            errorMessage = '–°–µ—Ä–≤–µ—Ä –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
          }

          dispatch(feedError(errorMessage));
        };

        socket.onmessage = (event): void => {
          try {
            const data = JSON.parse(event.data as string) as {
              success: boolean;
              orders: TOrder[];
              total: number;
              totalToday: number;
              message?: string;
            };

            if (data.success && Array.isArray(data.orders)) {
              console.log(
                `üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${data.orders.length}, –≤—Å–µ–≥–æ: ${data.total}, —Å–µ–≥–æ–¥–Ω—è: ${data.totalToday}`
              );

              const feedData: FeedData = {
                orders: data.orders,
                total: data.total || 0,
                totalToday: data.totalToday || 0,
              };
              dispatch(feedMessage(feedData));
            } else {
              console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
              dispatch(feedError(data.message ?? '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'));
            }
          } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
            dispatch(feedError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞'));
          }
        };
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
        dispatch(feedError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º'));
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    void connectWebSocket();
  }

  if (type === feedDisconnected.type && socket) {
    console.log('üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ WebSocket');
    reconnectAttempts = MAX_RECONNECT_ATTEMPTS; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    socket.close(1000, '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    socket = null;
  }

  return next(action);
};
