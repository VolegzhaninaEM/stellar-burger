import {
  feedConnect,
  feedConnected,
  feedDisconnected,
  feedError,
  feedMessage,
} from './feedSlice';

import type { FeedData } from './feedSlice';
import type { TOrder } from '@components/order-card/order-card.tsx';
import type { Middleware } from '@reduxjs/toolkit';

let socket: WebSocket | null = null;

// URL –¥–ª—è WebSocket –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤
const FEED_WS_URL = 'wss://norma.nomoreparties.space/orders/all';

// –°–æ–∑–¥–∞–µ–º –º–∏–¥–ª–≤–∞—Ä –¥–ª—è –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤
export const feedMiddleware: Middleware = (store) => (next) => (action) => {
  const { dispatch } = store;
  const { type } = action as { type: string };

  if (type === feedConnect.type) {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (socket) {
      console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      socket.close();
      socket = null;
    }

    try {
      socket = new WebSocket(FEED_WS_URL);

      socket.onopen = (): void => {
        console.log('‚úÖ WebSocket –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        dispatch(feedConnected());
      };

      socket.onclose = (event): void => {
        console.log('üîå WebSocket –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫—Ä—ã—Ç:', {
          code: event.code,
          reason: event.reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
          wasClean: event.wasClean,
        });
        dispatch(feedDisconnected());
        socket = null;
      };

      socket.onerror = (event): void => {
        console.error('üí• WebSocket –æ—à–∏–±–∫–∞:', event);
        dispatch(feedError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤'));
        socket = null;
      };

      socket.onmessage = (event): void => {
        try {
          const data = JSON.parse(event.data as string) as {
            success: boolean;
            orders: TOrder[];
            total: number;
            totalToday: number;
            message?: string;
          };

          console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–µ–Ω—Ç—ã:', data);

          if (data.success && Array.isArray(data.orders)) {
            console.log(
              `üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${data.orders.length}, –≤—Å–µ–≥–æ: ${data.total}, —Å–µ–≥–æ–¥–Ω—è: ${data.totalToday}`
            );

            const feedData: FeedData = {
              orders: data.orders,
              total: data.total || 0,
              totalToday: data.totalToday || 0,
            };
            dispatch(feedMessage(feedData));
          } else {
            console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            dispatch(feedError(data.message ?? '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'));
          }
        } catch (error) {
          console.error('üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
          dispatch(feedError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞'));
        }
      };
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
      dispatch(feedError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'));
    }
  }

  if (type === feedDisconnected.type && socket) {
    console.log('üîå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ WebSocket –ª–µ–Ω—Ç—ã');
    socket.close(1000, '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    socket = null;
  }

  return next(action);
};
