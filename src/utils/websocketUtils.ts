/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */

// –¢–∏–ø—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
type WebSocketTestResult = {
  success: boolean;
  error?: string;
  details?: {
    code?: number;
    reason?: string;
    event?: Event | CloseEvent;
    message?: string;
  };
};

type NetworkStatus = {
  online: boolean;
  connectionType?: string;
};

type EnvironmentInfo = {
  userAgent: string;
  online: boolean;
  connectionType?: string;
  protocol: string;
  host: string;
  webSocketSupported: boolean;
};

// –¢–∏–ø –¥–ª—è NetworkConnection
type NetworkConnection = {
  effectiveType?: string;
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebSocket —Å–µ—Ä–≤–µ—Ä–∞
 */
export const testWebSocketConnection = async (
  url: string
): Promise<WebSocketTestResult> => {
  return new Promise((resolve) => {
    try {
      console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${url}`);

      const testSocket = new WebSocket(url);
      const timeout = setTimeout(() => {
        testSocket.close();
        resolve({
          success: false,
          error: 'Timeout: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ 10 —Å–µ–∫—É–Ω–¥',
        });
      }, 10000);

      testSocket.onopen = (): void => {
        clearTimeout(timeout);
        console.log('‚úÖ –¢–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω');
        testSocket.close();
        resolve({ success: true });
      };

      testSocket.onerror = (event: Event): void => {
        clearTimeout(timeout);
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', event);
        resolve({
          success: false,
          error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
          details: {
            event,
            message: 'WebSocket connection failed',
          },
        });
      };

      testSocket.onclose = (event: CloseEvent): void => {
        clearTimeout(timeout);
        if (event.code !== 1000) {
          console.warn('‚ö†Ô∏è WebSocket –∑–∞–∫—Ä—ã–ª—Å—è —Å –∫–æ–¥–æ–º:', event.code, event.reason);
          resolve({
            success: false,
            error: `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å –∫–æ–¥–æ–º ${event.code}: ${event.reason}`,
            details: {
              code: event.code,
              reason: event.reason,
              event,
            },
          });
        }
      };
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebSocket:', error);
      resolve({
        success: false,
        error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
        details: {
          message: error instanceof Error ? error.message : 'Unknown error',
        },
      });
    }
  });
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
 */
export const checkNetworkStatus = (): NetworkStatus => {
  const online = navigator.onLine;
  const connection =
    (navigator as { connection?: NetworkConnection }).connection ??
    (navigator as { mozConnection?: NetworkConnection }).mozConnection ??
    (navigator as { webkitConnection?: NetworkConnection }).webkitConnection;

  return {
    online,
    connectionType: connection?.effectiveType ?? 'unknown',
  };
};

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
export const logEnvironmentInfo = (): EnvironmentInfo => {
  const networkStatus = checkNetworkStatus();

  const envInfo: EnvironmentInfo = {
    userAgent: navigator.userAgent,
    online: networkStatus.online,
    connectionType: networkStatus.connectionType,
    protocol: window.location.protocol,
    host: window.location.host,
    webSocketSupported: typeof WebSocket !== 'undefined',
  };

  console.log('üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', envInfo);

  return envInfo;
};
