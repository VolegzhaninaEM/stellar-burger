import {
  useAppDispatch,
  useAppSelector,
  feedConnect,
  feedDisconnected,
  selectFeedOrders,
  selectFeedIsConnected,
  selectFeedError,
  selectIngredients,
  profileOrdersConnect,
  profileOrdersDisconnected,
  selectProfileOrders,
  selectProfileOrdersIsConnected,
  selectProfileOrdersError,
} from '@/services';
import { memo, useCallback, useMemo, useEffect, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';

import OrderCard from '../order-card/order-card';

import type { TOrder } from '../order-card/order-card';
import type { JSX } from 'react';

import styles from './order-cards.module.css';

type OrderCardsProps = {
  /** –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 'feed' –¥–ª—è –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤, 'profile' –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è */
  mode: 'feed' | 'profile';
  /** –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ */
  showStatus?: boolean;
  /** –í–∫–ª—é—á–∏—Ç—å –ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è feed) */
  enablePeriodicUpdate?: boolean;
};

const OrderCards = ({
  mode,
  showStatus = false,
  enablePeriodicUpdate = false,
}: OrderCardsProps): JSX.Element => {
  const location = useLocation();
  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  // Refs –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const isMountedRef = useRef(false);
  const updateTimerRef = useRef<number | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const orders = useAppSelector(
    mode === 'feed' ? selectFeedOrders : selectProfileOrders
  );
  const ingredients = useAppSelector(selectIngredients);
  const isConnected = useAppSelector(
    mode === 'feed' ? selectFeedIsConnected : selectProfileOrdersIsConnected
  );
  const error = useAppSelector(
    mode === 'feed' ? selectFeedError : selectProfileOrdersError
  );

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const connectAction = mode === 'feed' ? feedConnect : profileOrdersConnect;
  const disconnectAction =
    mode === 'feed' ? feedDisconnected : profileOrdersDisconnected;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–µ–Ω—Ç—ã)
  const setupPeriodicUpdate = useCallback((): (() => void) => {
    if (mode !== 'feed' || !enablePeriodicUpdate) {
      return (): void => {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ "feed" –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
      };
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (updateTimerRef.current !== null) {
      window.clearInterval(updateTimerRef.current);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    updateTimerRef.current = window.setInterval(() => {
      console.log('üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤');
      if (isMountedRef.current) {
        dispatch(connectAction());
      }
    }, 15000);

    return (): void => {
      if (updateTimerRef.current !== null) {
        window.clearInterval(updateTimerRef.current);
        updateTimerRef.current = null;
      }
    };
  }, [dispatch, connectAction, mode, enablePeriodicUpdate]);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log(`üì£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ OrderCards (—Ä–µ–∂–∏–º: ${mode})`);
    isMountedRef.current = true;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    dispatch(connectAction());

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const cleanup = setupPeriodicUpdate();

    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return (): void => {
      console.log(`üîå –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ OrderCards (—Ä–µ–∂–∏–º: ${mode})`);
      isMountedRef.current = false;
      dispatch(disconnectAction());
      cleanup();
    };
  }, [dispatch, connectAction, disconnectAction, setupPeriodicUpdate, mode]);

  const handleOrderClick = useCallback(
    (order: TOrder): void => {
      const path =
        mode === 'feed' ? `/feed/${order._id}` : `/profile/orders/${order._id}`;

      void navigate(path, {
        state: { background: location },
      });
    },
    [navigate, location, mode]
  );

  const handleRetryConnection = useCallback((): void => {
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ä–µ–∂–∏–º: ${mode})...`);
    dispatch(disconnectAction());
    setTimeout(() => {
      dispatch(connectAction());
    }, 1000);
  }, [dispatch, connectAction, disconnectAction, mode]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
  const orderElements = useMemo(() => {
    let sortedOrders = [...orders];

    if (mode === 'feed') {
      // –î–ª—è –ª–µ–Ω—Ç—ã —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤ –Ω–∞—á–∞–ª–µ)
      sortedOrders = sortedOrders.sort(
        (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );
    } else {
      // –î–ª—è –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤–≤–µ—Ä—Ö—É)
      sortedOrders = sortedOrders.reverse();
    }

    return sortedOrders.map((order) => (
      <OrderCard
        key={order._id}
        order={order}
        ingredients={ingredients}
        onClick={handleOrderClick}
        showStatus={showStatus}
      />
    ));
  }, [orders, ingredients, handleOrderClick, showStatus, mode]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (error) {
    return (
      <div className={styles.container}>
        <div className={styles.errorState}>
          <div className="text text_type_main-medium mb-4">
            {mode === 'feed'
              ? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–µ–Ω—Ç—É –∑–∞–∫–∞–∑–æ–≤'
              : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤'}
          </div>
          <div className="text text_type_main-default text_color_inactive mb-6">
            {error}
          </div>
          <button
            className="button button_type_primary button_size_medium"
            onClick={handleRetryConnection}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (!isConnected && orders.length === 0) {
    return (
      <div className={styles.container}>
        <div className="text text_type_main-medium text_color_inactive">
          {mode === 'feed'
            ? '–ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤...'
            : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–∞–∫–∞–∑–æ–≤...'}
        </div>
      </div>
    );
  }

  return (
    <>
      <div className={styles.container}>
        {orders.length > 0 ? (
          orderElements
        ) : isConnected ? (
          <div className={styles.errorState}>
            <div className="text text_type_main-medium text_color_inactive mb-2">
              {mode === 'feed' ? '–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤'}
            </div>
            <div className="text text_type_main-default text_color_inactive">
              {mode === 'feed'
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'
                : '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –±—É—Ä–≥–µ—Ä'}
            </div>
          </div>
        ) : null}
      </div>
    </>
  );
};

export default memo(OrderCards);
