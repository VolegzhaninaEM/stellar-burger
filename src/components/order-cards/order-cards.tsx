import {
  useAppDispatch,
  useAppSelector,
  feedConnect,
  feedDisconnected,
  selectFeedOrders,
  selectFeedIsConnected,
  selectFeedError,
  selectIngredients,
} from '@/services';
import { memo, useCallback, useState, useMemo, useEffect, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';

import OrderCard from '../order-card/order-card';
import Modal from '@components/modal/modal';
import OrderInfo from '@components/order-info/order-info';

import type { TOrder } from '../order-card/order-card';
import type { JSX } from 'react';

import styles from './order-cards.module.css';

const OrderCards = (): JSX.Element => {
  const [currentItem, setCurrentItem] = useState<TOrder | undefined>();
  const [isModalOpen, setModalState] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  // –î–æ–±–∞–≤–ª—è–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const isMountedRef = useRef(false);
  // –î–æ–±–∞–≤–ª—è–µ–º ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const updateTimerRef = useRef<number | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redux store
  const orders = useAppSelector(selectFeedOrders);
  const ingredients = useAppSelector(selectIngredients);
  const isConnected = useAppSelector(selectFeedIsConnected);
  const error = useAppSelector(selectFeedError);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤
  const setupPeriodicUpdate = useCallback(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (updateTimerRef.current !== null) {
      window.clearInterval(updateTimerRef.current);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    updateTimerRef.current = window.setInterval(() => {
      console.log('üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤');
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
      if (isMountedRef.current) {
        dispatch(feedConnect());
      }
    }, 15000); // 15 —Å–µ–∫—É–Ω–¥

    return (): void => {
      if (updateTimerRef.current !== null) {
        window.clearInterval(updateTimerRef.current);
        updateTimerRef.current = null;
      }
    };
  }, [dispatch]);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  useEffect(() => {
    console.log('üì£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ OrderCards');
    isMountedRef.current = true;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    dispatch(feedConnect());

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const cleanup = setupPeriodicUpdate();

    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return (): void => {
      console.log('üîå –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ OrderCards');
      isMountedRef.current = false;
      dispatch(feedDisconnected());
      cleanup();
    };
  }, [dispatch, setupPeriodicUpdate]);

  const handleCloseModal = useCallback((): void => {
    setModalState(false);
    setCurrentItem(undefined);
  }, []);

  const handleOrderClick = useCallback(
    (order: TOrder): void => {
      setCurrentItem(order);
      setModalState(true);
      void navigate(`/feed/${order._id}`, {
        state: { background: location },
      });
    },
    [navigate, location]
  );

  const handleRetryConnection = useCallback((): void => {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–µ–Ω—Ç–µ –∑–∞–∫–∞–∑–æ–≤...');
    dispatch(feedDisconnected()); // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
    setTimeout(() => {
      dispatch(feedConnect()); // –ó–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∑–∞–Ω–æ–≤–æ
    }, 1000);
  }, [dispatch]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤ –Ω–∞—á–∞–ª–µ)
  const orderElements = useMemo(
    () =>
      [...orders] // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        .sort(
          (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        )
        .map((order) => (
          <OrderCard
            key={order._id}
            order={order}
            ingredients={ingredients}
            onClick={handleOrderClick}
            showStatus={false}
          />
        )),
    [orders, ingredients, handleOrderClick]
  );

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <div className={styles.container}>
        <div className={styles.errorState}>
          <div className="text text_type_main-medium mb-4">
            –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–µ–Ω—Ç—É –∑–∞–∫–∞–∑–æ–≤
          </div>
          <div className="text text_type_main-default text_color_inactive mb-6">
            {error}
          </div>
          <button
            className="button button_type_primary button_size_medium"
            onClick={handleRetryConnection}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (!isConnected && orders.length === 0) {
    return (
      <div className={styles.container}>
        <div className={styles.loadingState}>
          <div className="text text_type_main-medium text_color_inactive">
            –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...
          </div>
          <div className="text text_type_main-default text_color_inactive mt-2">
            –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className={styles.container}>
        {orders.length > 0 ? (
          orderElements
        ) : (
          <div className="text text_type_main-medium">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
        )}
      </div>
      {isModalOpen && currentItem && (
        <Modal onClose={handleCloseModal}>
          <OrderInfo order={currentItem} ingredients={ingredients} />
        </Modal>
      )}
    </>
  );
};

export default memo(OrderCards);
