import {
  ForgotPassword,
  HomePage,
  IngredientPage,
  LoginPage,
  ProfilePage,
  RegisterPage,
  ResetPassword,
  FeedsPage,
  FeedOrderPage,
} from '@/pages';
import { memo, useEffect, useMemo } from 'react';
import { Navigate, Route, Routes, useLocation } from 'react-router-dom';

import { setAuthChecked, initializeAuth } from '../../services/authSlice.ts';
import { useAppDispatch, useAppSelector } from '../../services/hooks';
import { fetchIngredients } from '../../services/ingredientsSlice.ts';
import {
  clearProfileOrders,
  profileOrdersDisconnect,
} from '../../services/profileOrdersSlice.ts';
import { AppHeader } from '@components/app-header/app-header.tsx';
import IngredientDetails from '@components/ingredient-details/ingredient-details.tsx';
import Modal from '@components/modal/modal.tsx';
import OrderInfo from '@components/order-info/order-info.tsx';
import ProfileOrders from '@components/profile-orders/profile-orders.tsx';
import { ProfileUpdateForm } from '@components/profile-update-form/profile-update-form.tsx';
import { ProtectedResetRoute } from '@components/protected-reset-route/protected-reset-route.tsx';
import { ProtectedRouteElement } from '@components/protected-route-element/protected-route-element.tsx';
import { ROUTES } from '@utils/constants.ts';

import type { RootState } from '@services/store.ts';
import type { TIngredient, TLocationState } from '@utils/types.ts';
import type { JSX } from 'react';

export const App = (): JSX.Element => {
  const location = useLocation();
  const state = location.state as TLocationState;
  const background = state?.background ?? location;
  const isAuth = useAppSelector((s: RootState) => s.auth.accessToken);
  const authChecked = useAppSelector((s: RootState) => s.auth.authChecked);
  const from: string = (location.state as { from?: string })?.from ?? ROUTES.HOME;
  const ingredients: TIngredient[] = useAppSelector((s) => s.ingredients.items);
  const ingredient: TIngredient | undefined = ingredients.find(
    (i) => i._id === location.pathname.split('/').pop()
  );

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const feedOrders = useAppSelector((s) => s.feed.orders);
  const profileOrders = useAppSelector((s) => s.profileOrders.orders);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const orderId = location.pathname.split('/').pop();
  const currentOrder = useMemo(() => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –∏—Å–∫–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL
    if (location.pathname.startsWith('/profile/orders/')) {
      // –î–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è –∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
      const profileOrder = profileOrders.find((order) => order._id === orderId);
      if (profileOrder) {
        return profileOrder;
      }
    } else if (location.pathname.startsWith('/feed/')) {
      // –î–ª—è –∑–∞–∫–∞–∑–æ–≤ –ª–µ–Ω—Ç—ã –∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–µ–Ω—Ç–µ
      const feedOrder = feedOrders.find((order) => order._id === orderId);
      if (feedOrder) {
        return feedOrder;
      }
    }

    return undefined;
  }, [feedOrders, profileOrders, orderId, location.pathname, state?.background]);

  const dispatch = useAppDispatch();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const initApp = async (): Promise<void> => {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        await dispatch(initializeAuth()).unwrap();

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await dispatch(fetchIngredients());
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        dispatch(setAuthChecked(true));
      }
    };

    void initApp();
  }, [dispatch]);

  // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  useEffect(() => {
    if (!isAuth && authChecked) {
      dispatch(profileOrdersDisconnect());
      dispatch(clearProfileOrders());
    }
  }, [isAuth, authChecked, dispatch]);

  // –û—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return (): void => {
      dispatch(profileOrdersDisconnect());
      dispatch(clearProfileOrders());
    };
  }, [dispatch]);

  if (!authChecked) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>; // üîÅ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä, –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º —Å—Ç–∞—Ç—É—Å
  }

  return (
    <>
      <AppHeader isAuth={!!isAuth} />
      <Routes location={background}>
        <Route path={ROUTES.HOME} element={<HomePage />} />
        <Route
          path={ROUTES.LOGIN}
          element={!isAuth ? <LoginPage /> : <Navigate to={from} />}
        />
        <Route
          path={ROUTES.FORGOT_PASSWORD}
          element={!isAuth ? <ForgotPassword /> : <Navigate to={from} />}
        />
        <Route
          path={ROUTES.PROFILE}
          element={<ProtectedRouteElement element={<ProfilePage />} />}
        >
          <Route path={ROUTES.PROFILE} element={<ProfileUpdateForm />} />
          <Route path={ROUTES.PROFILE_ORDERS} element={<ProfileOrders />} />
          <Route path={ROUTES.PROFILE_ORDER} element={<FeedOrderPage />} />
        </Route>
        <Route path={ROUTES.INGREDIENTS} element={<IngredientPage />} />
        <Route path={ROUTES.REGISTER} element={<RegisterPage />} />
        <Route
          path={ROUTES.RESET_PASSWORD}
          element={
            <ProtectedResetRoute
              element={!isAuth ? <ResetPassword /> : <Navigate to={ROUTES.HOME} />}
            />
          }
        />
        <Route path={ROUTES.FEEDS} element={<FeedsPage />} />
        <Route path={ROUTES.FEED} element={<FeedOrderPage />} />
        <Route
          path={ROUTES.PROFILE_ORDER}
          element={<ProtectedRouteElement element={<FeedOrderPage />} />}
        />
      </Routes>

      {state?.background !== undefined && (
        <>
          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ */}
          {location.pathname.startsWith('/ingredients/') && (
            <Modal onClose={() => window.history.back()}>
              <IngredientDetails card={ingredient} />
            </Modal>
          )}

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ª–µ–Ω—Ç—ã */}
          {location.pathname.startsWith('/feed/') &&
            !location.pathname.includes('/profile') && (
              <>
                <Modal onClose={() => window.history.back()}>
                  {currentOrder ? (
                    <OrderInfo
                      order={currentOrder}
                      ingredients={ingredients}
                      showStatus={true}
                    />
                  ) : (
                    <div>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
                  )}
                </Modal>
              </>
            )}

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è */}
          {location.pathname.startsWith('/profile/orders/') && (
            <>
              {isAuth ? (
                <Modal onClose={() => window.history.back()}>
                  {currentOrder ? (
                    <OrderInfo
                      order={currentOrder}
                      ingredients={ingredients}
                      showStatus={true}
                    />
                  ) : (
                    <div>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
                  )}
                </Modal>
              ) : (
                <Navigate to={ROUTES.LOGIN} replace />
              )}
            </>
          )}
        </>
      )}
    </>
  );
};

export default memo(App);
